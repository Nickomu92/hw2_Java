package com.nikomu_main;

import com.nikomu_enums.Color;

public class Question {
    public static void main(String[] args) {
        String question = "     -\"Почему локальный класс не может менять локальную переменную\"";
        String answer = """
                    -\"Локальный внутренний класс - это класс, который объявляется внутри любого блока операторов ({}) 
                основного класса, но чаще всего такой класс объявляется внутри метода основного класса. Область 
                видимости локального внутреннего класса - соотвественно в контексте блока операторов {} метода, за 
                пределами {} локальный класс не существует.
                    Локальная переменная - это переменная, объявленная внутри метода основного класса, её область 
                видимости - тоже только в контексте блока операторов.
                    Особенностью локального класса является возможность доступа только к локальным переменным метода, 
                которые объявлены как константы, то есть имеют модификатор доступа final. Это касается Java 7 и ниже. 
                Касательно Javа 8 и выше, то в этой редакции языка локальный класс имеет доступ не только к 
                final-локальным переменным, но и к так называемым "effective-final"-переменным - переменным, значение 
                которых не изменялось после их инициализации.
                    Локальный класс не может менять локальную переменную потому, что:
                1) Если переменная является константой, то нильзя изменить её значение;
                2) Если переменная является "effective-final", то при её изменении она уже не будет являтся таковой.
                    Поэтому при любой попытке изменения данной переменной локальным классом, IDE должна предупредить 
                нас, а при игнорировании предупреждений - выдать ошибку при попытке компиляции.\"
                """;

        System.out.printf("%s%s\n%s%s%s", Color.ANSI_CYAN.getCode(), question, Color.ANSI_YELLOW.getCode(), answer, Color.ANSI_RESET.getCode());
    }
}
